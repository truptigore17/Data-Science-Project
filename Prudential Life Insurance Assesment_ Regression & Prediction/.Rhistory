x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
# http://stackoverflow.com/questions/21827776/plot-margins-for-support-vector-machine
rm(list=ls(all=TRUE))
x1s <- c(.5,1,1,2,3,3.5,0,1,-1.2,0,1,3.5,4,5,5.5,6)
x2s <- c(3.5,1,2.5,2,1,1.2,2,1,-1.2,0,5.8,3,4,5,4,1)
ys <- c(rep(+1,8),          rep(-1,8))
my.data <- data.frame(x1=x1s, x2=x2s, type=as.factor(ys))
my.data
library('e1071')
# use one of the following two options
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 10000) # cost = 1
svm.model
#svm.model <- svm(type ~ ., data=my.data,
# type='C-classification', kernel='linear', scale=FALSE, cost = 0.5)
#svm.model
# svm.model$index is the indices of support vectors
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
# https://www.r-bloggers.com/hierarchical-clustering-in-r-2/
#install.packages("ggplot2")
#install.packages("XLConnect")
library(ggplot2)
library(XLConnect)
play <- readWorksheetFromFile("C:/Users/Trupti/Desktop/play.xlsx", sheet = 1)
# complete linkage
clusters <- hclust(dist(play[, 2:3]))
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
# mean/average linkage
clusters <- hclust(dist(play[, 2:3]), method = 'average')
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
ggplot(play, aes(play$Temperature, play$Humidity, color = play$Decision)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
# https://www.r-bloggers.com/hierarchical-clustering-in-r-2/
#install.packages("ggplot2")
#install.packages("XLConnect")
library(ggplot2)
library(XLConnect)
play <- readWorksheetFromFile("C:/Users/Trupti/Desktop/play.xlsx", sheet = 1)
# complete linkage
clusters <- hclust(dist(play[, 2:3]))
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
# mean/average linkage
clusters <- hclust(dist(play[, 2:3]), method = 'average')
plot(clusters)
clusterCut <- cutree(clusters, 2)
table(clusterCut, play$Decision)
ggplot(play, aes(play$Temperature, play$Humidity, color = play$Decision)) +
geom_point(alpha = 0.4, size = 3.5) + geom_point(col = clusterCut) +
scale_color_manual(values = c('black', 'red', 'green'))
data(GermanCredit)
write.csv(Germancredit, file="Germancredit.csv")
data(GermanCredit)
Germancredit
library(caret)
library(e1071)
data(GermanCredit)
Germancredit
data(GermanCredit)
dataset = GermanCredit
write.csv(dataset, file="Germancredit.csv")
getwd
getwd
getwd()
###########################################################
######### Please fill the ??? with proper description (atleast 130 charaters for each)
######### for SVM function try different values to achieve better results
# loading neccessary packages and dataset
install.packages("caret")
install.packages("e1701")
install.packages("caret")
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
write.csv(dataset, file="Germancredit.csv")
getwd()
# ???
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
write.csv(dataset, file="dataset.csv")
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
# ???
#model = svm(Class ~ ., kernel = ???, cost = ???, gamma = ???, data = train_dateset, scale = F)
model = svm(Class ~ ., kernel = "linear", cost = 0.5, data = train_dateset, scale = F)
#model = svm(Class ~ ., kernel = "radial", cost = 0.5, gamma = 10, data = train_dateset, scale = F)
# ???
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
model = svm(Class ~ ., kernel = "radial", cost = 0.5, gamma = 10, data = train_dateset, scale = F)
# ???
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
summary(predictions)
model = svm(Class ~ ., kernel = "radial", cost = 0.5, gamma = 1, data = train_dateset, scale = F)
# ???
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
library(caret)
x<-subset(train_dateset, select = -Class)
y<- train_dateset$Class
model<-svm(x,y, scale=F)
obj<-tune(svm, Class~.,kernel ="linear", data= train_dateset, ranges=list(cost=2^(-5:15)))
summary(obj)
summary(obj)
library(e1071)
obj<-tune(svm, Class~.,kernel ="linear", data= train_dateset, cost=2^(-5:15))
summary(obj)
#install.packages("caret")
#install.packages("e1701")
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
#write.csv(dataset, file="dataset.csv")
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
obj<-tune.svm(Class~.,kernel ="linear", data= train_dateset, cost=2^(-5:10))
summary(obj)
model = svm(Class ~ ., kernel = "radial", cost = 2,gamma=0.0625, data = train_dateset, scale = F)
model = svm(Class ~ ., kernel = "radial", cost = 2,gamma=0.0625, data = train_dateset, scale = F)
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
install.packages("ade4")
library(ade4)
library(ggplot2)
# Read CSV into R
mydata <- read.csv(file="train.csv", header=TRUE, sep=",")
getwd()
setwd("E:/ADS/MidTerm Project")
library(ade4)
library(ggplot2)
# Read CSV into R
mydata <- read.csv(file="train.csv", header=TRUE, sep=",")
original_data <- mydata
#mydata
options(max.print=1000000)
mydata$Family_Hist_3 <- NULL
mydata$Family_Hist_5 <- NULL
mydata$Medical_History_10 <- NULL
mydata$Medical_History_15 <- NULL
mydata$Medical_History_24 <- NULL
mydata$Medical_History_32 <- NULL
mydata$Id <- NULL
mylist <- c(unlist(lapply(mydata, function(x) any(is.na(x)))))
mydata$Employment_Info_1[is.na(mydata$Employment_Info_1)] <- mean(mydata$Employment_Info_1, na.rm = T)
#Filling missing values with mean value for Employment_Info_4
mydata$Employment_Info_4[is.na(mydata$Employment_Info_4)] <- mean(mydata$Employment_Info_4, na.rm = T)
#Filling missing values with mean value for all the collumns of the dataset with their mean
#for(i in 1:ncol(mydata)){ data[is.na(mydata[,i]), i] <- mean(mydata[,i], na.rm = TRUE) }
#Not working
#Filling missing values with mean value for Employment_Info_6
mydata$Employment_Info_6[is.na(mydata$Employment_Info_6)] <- mean(mydata$Employment_Info_6, na.rm = T)
#Filling missing values with mean value for Insurance_History_5
mydata$Insurance_History_5[is.na(mydata$Insurance_History_5)] <- mean(mydata$Insurance_History_5, na.rm = T)
#Filling missing values with mean value for Family_Hist_2
mydata$Family_Hist_2[is.na(mydata$Family_Hist_2)] <- mean(mydata$Family_Hist_2, na.rm = T)
#Filling missing values with mean value for Family_Hist_4
mydata$Family_Hist_4[is.na(mydata$Family_Hist_4)] <- mean(mydata$Family_Hist_4, na.rm = T)
#Filling missing values with mean value for Medical_History_1
mydata$Medical_History_1[is.na(mydata$Medical_History_1)] <- mean(mydata$Medical_History_1, na.rm = T)
write.csv(mydata,file ="train_updated.csv")
data_ctgr <- mydata[c("Medical_History_1","Product_Info_1", "Product_Info_2", "Product_Info_3", "Product_Info_5", "Product_Info_6", "Product_Info_7", "Employment_Info_2", "Employment_Info_3", "Employment_Info_5", "InsuredInfo_1", "InsuredInfo_2", "InsuredInfo_3", "InsuredInfo_4", "InsuredInfo_5", "InsuredInfo_6", "InsuredInfo_7", "Insurance_History_1", "Insurance_History_2", "Insurance_History_3", "Insurance_History_4", "Insurance_History_7", "Insurance_History_8", "Insurance_History_9", "Family_Hist_1", "Medical_History_2", "Medical_History_3", "Medical_History_4", "Medical_History_5", "Medical_History_6", "Medical_History_7", "Medical_History_8", "Medical_History_9", "Medical_History_11", "Medical_History_12", "Medical_History_13", "Medical_History_14", "Medical_History_16", "Medical_History_17", "Medical_History_18", "Medical_History_19", "Medical_History_20", "Medical_History_21", "Medical_History_22", "Medical_History_23", "Medical_History_25", "Medical_History_26", "Medical_History_27", "Medical_History_28", "Medical_History_29", "Medical_History_30", "Medical_History_31", "Medical_History_33", "Medical_History_34", "Medical_History_35", "Medical_History_36", "Medical_History_37", "Medical_History_38", "Medical_History_39", "Medical_History_40", "Medical_History_41")]
OneToCconv <- acm.disjonctif(data_ctgr)
data_cntg <- mydata[c("Product_Info_4", "Ins_Age", "Ht", "Wt", "BMI", "Employment_Info_1", "Employment_Info_4", "Employment_Info_6", "Insurance_History_5", "Family_Hist_2", "Family_Hist_4")]
data_dummy<-mydata[c("Medical_Keyword_1","Medical_Keyword_2","Medical_Keyword_3","Medical_Keyword_4","Medical_Keyword_5","Medical_Keyword_6","Medical_Keyword_7","Medical_Keyword_8","Medical_Keyword_9","Medical_Keyword_10","Medical_Keyword_11","Medical_Keyword_12","Medical_Keyword_13","Medical_Keyword_14","Medical_Keyword_15","Medical_Keyword_16","Medical_Keyword_17","Medical_Keyword_18","Medical_Keyword_19", "Medical_Keyword_20", "Medical_Keyword_21", "Medical_Keyword_22", "Medical_Keyword_23","Medical_Keyword_24", "Medical_Keyword_25", "Medical_Keyword_26", "Medical_Keyword_27", "Medical_Keyword_28", "Medical_Keyword_29","Medical_Keyword_30", "Medical_Keyword_31", "Medical_Keyword_32", "Medical_Keyword_33","Medical_Keyword_34", "Medical_Keyword_35","Medical_Keyword_36", "Medical_Keyword_37", "Medical_Keyword_38", "Medical_Keyword_39", "Medical_Keyword_40", "Medical_Keyword_41", "Medical_Keyword_42", "Medical_Keyword_43", "Medical_Keyword_44", "Medical_Keyword_45","Medical_Keyword_46", "Medical_Keyword_47","Medical_Keyword_48")]
final_data <- data.frame(c(OneToCconv, data_cntg,data_dummy))
final_pca_data <- prcomp(final_data)
summary(final_pca_data)
final_pca_data_trimmed <- data.frame(final_pca_data$x[,1:71])
pcaYVar <- data.frame(c(final_pca_data_trimmed, original_data[c("Response")]))
final_pca_data_trimmed <- data.frame(final_pca_data$x[,1:75])
pcaYVar <- data.frame(c(final_pca_data_trimmed, original_data[c("Response")]))
#pcaYVar$Response<-as.factor(pcaYVar$Response)
pcaYVar$Response<-as.numeric(pcaYVar$Response)
#i_train<-sample(1:nrow(pcaYVar), nrow(pcaYVar)*0.85)
#train<-pcaYVar[i_train,]
#test<-pcaYVar[-i_train,]
train <-pcaYVar[1:49382,]
test <- pcaYVar[49383:59382,]
lm_model <- lm(Response ~., data =train)
summary(lm_model)
pred <- predict(lm_model, test)
error <- (test$Response - pred)^2
print(error)
mse<-sqrt(mean(error, na.rm = T))
print(mse)
pf<-data.frame((round(pred)))
final<-data.frame(c(test$Response,pf$X.round.pred..))
View(final)
getwd()
setwd("E:/ADS/MidTerm Project")
library(ade4)
library(ggplot2)
# Read CSV into R
mydata <- read.csv(file="train.csv", header=TRUE, sep=",")
original_data <- mydata
#mydata
options(max.print=1000000)
View(mydata)
#Deleting columns with empty cells more than 60%
mydata$Family_Hist_3 <- NULL
mydata$Family_Hist_5 <- NULL
mydata$Medical_History_10 <- NULL
mydata$Medical_History_15 <- NULL
mydata$Medical_History_24 <- NULL
mydata$Medical_History_32 <- NULL
mydata$Id <- NULL
View(mydata)
#Getting list of columns having missing values
mylist <- c(unlist(lapply(mydata, function(x) any(is.na(x)))))
View(mylist)
#Filling missing values with mean value for Employment_Info_1
mydata$Employment_Info_1[is.na(mydata$Employment_Info_1)] <- mean(mydata$Employment_Info_1, na.rm = T)
#Filling missing values with mean value for Employment_Info_4
mydata$Employment_Info_4[is.na(mydata$Employment_Info_4)] <- mean(mydata$Employment_Info_4, na.rm = T)
#Filling missing values with mean value for all the collumns of the dataset with their mean
#for(i in 1:ncol(mydata)){ data[is.na(mydata[,i]), i] <- mean(mydata[,i], na.rm = TRUE) }
#Not working
#Filling missing values with mean value for Employment_Info_6
mydata$Employment_Info_6[is.na(mydata$Employment_Info_6)] <- mean(mydata$Employment_Info_6, na.rm = T)
#Filling missing values with mean value for Insurance_History_5
mydata$Insurance_History_5[is.na(mydata$Insurance_History_5)] <- mean(mydata$Insurance_History_5, na.rm = T)
#Filling missing values with mean value for Family_Hist_2
mydata$Family_Hist_2[is.na(mydata$Family_Hist_2)] <- mean(mydata$Family_Hist_2, na.rm = T)
#Filling missing values with mean value for Family_Hist_4
mydata$Family_Hist_4[is.na(mydata$Family_Hist_4)] <- mean(mydata$Family_Hist_4, na.rm = T)
#Filling missing values with mean value for Medical_History_1
mydata$Medical_History_1[is.na(mydata$Medical_History_1)] <- mean(mydata$Medical_History_1, na.rm = T)
View(mylist)
write.csv(mydata,file ="train_updated.csv")
data_ctgr <- mydata[c("Medical_History_1","Product_Info_1", "Product_Info_2", "Product_Info_3", "Product_Info_5", "Product_Info_6", "Product_Info_7", "Employment_Info_2", "Employment_Info_3", "Employment_Info_5", "InsuredInfo_1", "InsuredInfo_2", "InsuredInfo_3", "InsuredInfo_4", "InsuredInfo_5", "InsuredInfo_6", "InsuredInfo_7", "Insurance_History_1", "Insurance_History_2", "Insurance_History_3", "Insurance_History_4", "Insurance_History_7", "Insurance_History_8", "Insurance_History_9", "Family_Hist_1", "Medical_History_2", "Medical_History_3", "Medical_History_4", "Medical_History_5", "Medical_History_6", "Medical_History_7", "Medical_History_8", "Medical_History_9", "Medical_History_11", "Medical_History_12", "Medical_History_13", "Medical_History_14", "Medical_History_16", "Medical_History_17", "Medical_History_18", "Medical_History_19", "Medical_History_20", "Medical_History_21", "Medical_History_22", "Medical_History_23", "Medical_History_25", "Medical_History_26", "Medical_History_27", "Medical_History_28", "Medical_History_29", "Medical_History_30", "Medical_History_31", "Medical_History_33", "Medical_History_34", "Medical_History_35", "Medical_History_36", "Medical_History_37", "Medical_History_38", "Medical_History_39", "Medical_History_40", "Medical_History_41")]
OneToCconv <- acm.disjonctif(data_ctgr)
data_cntg <- mydata[c("Product_Info_4", "Ins_Age", "Ht", "Wt", "BMI", "Employment_Info_1", "Employment_Info_4", "Employment_Info_6", "Insurance_History_5", "Family_Hist_2", "Family_Hist_4")]
data_dummy<-mydata[c("Medical_Keyword_1","Medical_Keyword_2","Medical_Keyword_3","Medical_Keyword_4","Medical_Keyword_5","Medical_Keyword_6","Medical_Keyword_7","Medical_Keyword_8","Medical_Keyword_9","Medical_Keyword_10","Medical_Keyword_11","Medical_Keyword_12","Medical_Keyword_13","Medical_Keyword_14","Medical_Keyword_15","Medical_Keyword_16","Medical_Keyword_17","Medical_Keyword_18","Medical_Keyword_19", "Medical_Keyword_20", "Medical_Keyword_21", "Medical_Keyword_22", "Medical_Keyword_23","Medical_Keyword_24", "Medical_Keyword_25", "Medical_Keyword_26", "Medical_Keyword_27", "Medical_Keyword_28", "Medical_Keyword_29","Medical_Keyword_30", "Medical_Keyword_31", "Medical_Keyword_32", "Medical_Keyword_33","Medical_Keyword_34", "Medical_Keyword_35","Medical_Keyword_36", "Medical_Keyword_37", "Medical_Keyword_38", "Medical_Keyword_39", "Medical_Keyword_40", "Medical_Keyword_41", "Medical_Keyword_42", "Medical_Keyword_43", "Medical_Keyword_44", "Medical_Keyword_45","Medical_Keyword_46", "Medical_Keyword_47","Medical_Keyword_48")]
final_data <- data.frame(c(OneToCconv, data_cntg,data_dummy))
final_pca_data <- prcomp(final_data)
summary(final_pca_data)
summary(final_pca_data)
getwd()
setwd("E:/ADS/MidTerm Project")
library(ade4)
library(ggplot2)
# Read CSV into R
mydata <- read.csv(file="train.csv", header=TRUE, sep=",")
original_data <- mydata
#mydata
options(max.print=1000000)
mydata$Family_Hist_3 <- NULL
mydata$Family_Hist_5 <- NULL
mydata$Medical_History_10 <- NULL
mydata$Medical_History_15 <- NULL
mydata$Medical_History_24 <- NULL
mydata$Medical_History_32 <- NULL
mydata$Id <- NULL
mylist <- c(unlist(lapply(mydata, function(x) any(is.na(x)))))
mydata$Employment_Info_1[is.na(mydata$Employment_Info_1)] <- mean(mydata$Employment_Info_1, na.rm = T)
#Filling missing values with mean value for Employment_Info_4
mydata$Employment_Info_4[is.na(mydata$Employment_Info_4)] <- mean(mydata$Employment_Info_4, na.rm = T)
#Filling missing values with mean value for all the collumns of the dataset with their mean
#for(i in 1:ncol(mydata)){ data[is.na(mydata[,i]), i] <- mean(mydata[,i], na.rm = TRUE) }
#Not working
#Filling missing values with mean value for Employment_Info_6
mydata$Employment_Info_6[is.na(mydata$Employment_Info_6)] <- mean(mydata$Employment_Info_6, na.rm = T)
#Filling missing values with mean value for Insurance_History_5
mydata$Insurance_History_5[is.na(mydata$Insurance_History_5)] <- mean(mydata$Insurance_History_5, na.rm = T)
#Filling missing values with mean value for Family_Hist_2
mydata$Family_Hist_2[is.na(mydata$Family_Hist_2)] <- mean(mydata$Family_Hist_2, na.rm = T)
#Filling missing values with mean value for Family_Hist_4
mydata$Family_Hist_4[is.na(mydata$Family_Hist_4)] <- mean(mydata$Family_Hist_4, na.rm = T)
#Filling missing values with mean value for Medical_History_1
mydata$Medical_History_1[is.na(mydata$Medical_History_1)] <- mean(mydata$Medical_History_1, na.rm = T)
write.csv(mydata,file ="train_updated.csv")
data_ctgr <- mydata[c("Medical_History_1","Product_Info_1", "Product_Info_2", "Product_Info_3", "Product_Info_5", "Product_Info_6", "Product_Info_7", "Employment_Info_2", "Employment_Info_3", "Employment_Info_5", "InsuredInfo_1", "InsuredInfo_2", "InsuredInfo_3", "InsuredInfo_4", "InsuredInfo_5", "InsuredInfo_6", "InsuredInfo_7", "Insurance_History_1", "Insurance_History_2", "Insurance_History_3", "Insurance_History_4", "Insurance_History_7", "Insurance_History_8", "Insurance_History_9", "Family_Hist_1", "Medical_History_2", "Medical_History_3", "Medical_History_4", "Medical_History_5", "Medical_History_6", "Medical_History_7", "Medical_History_8", "Medical_History_9", "Medical_History_11", "Medical_History_12", "Medical_History_13", "Medical_History_14", "Medical_History_16", "Medical_History_17", "Medical_History_18", "Medical_History_19", "Medical_History_20", "Medical_History_21", "Medical_History_22", "Medical_History_23", "Medical_History_25", "Medical_History_26", "Medical_History_27", "Medical_History_28", "Medical_History_29", "Medical_History_30", "Medical_History_31", "Medical_History_33", "Medical_History_34", "Medical_History_35", "Medical_History_36", "Medical_History_37", "Medical_History_38", "Medical_History_39", "Medical_History_40", "Medical_History_41")]
OneToCconv <- acm.disjonctif(data_ctgr)
data_cntg <- mydata[c("Product_Info_4", "Ins_Age", "Ht", "Wt", "BMI", "Employment_Info_1", "Employment_Info_4", "Employment_Info_6", "Insurance_History_5", "Family_Hist_2", "Family_Hist_4")]
data_dummy<-mydata[c("Medical_Keyword_1","Medical_Keyword_2","Medical_Keyword_3","Medical_Keyword_4","Medical_Keyword_5","Medical_Keyword_6","Medical_Keyword_7","Medical_Keyword_8","Medical_Keyword_9","Medical_Keyword_10","Medical_Keyword_11","Medical_Keyword_12","Medical_Keyword_13","Medical_Keyword_14","Medical_Keyword_15","Medical_Keyword_16","Medical_Keyword_17","Medical_Keyword_18","Medical_Keyword_19", "Medical_Keyword_20", "Medical_Keyword_21", "Medical_Keyword_22", "Medical_Keyword_23","Medical_Keyword_24", "Medical_Keyword_25", "Medical_Keyword_26", "Medical_Keyword_27", "Medical_Keyword_28", "Medical_Keyword_29","Medical_Keyword_30", "Medical_Keyword_31", "Medical_Keyword_32", "Medical_Keyword_33","Medical_Keyword_34", "Medical_Keyword_35","Medical_Keyword_36", "Medical_Keyword_37", "Medical_Keyword_38", "Medical_Keyword_39", "Medical_Keyword_40", "Medical_Keyword_41", "Medical_Keyword_42", "Medical_Keyword_43", "Medical_Keyword_44", "Medical_Keyword_45","Medical_Keyword_46", "Medical_Keyword_47","Medical_Keyword_48")]
final_data <- data.frame(c(OneToCconv, data_cntg,data_dummy))
final_pca_data <- prcomp(final_data)
summary(final_pca_data)
final_pca_data_trimmed <- data.frame(final_pca_data$x[,1:116])
pcaYVar <- data.frame(c(final_pca_data_trimmed, original_data[c("Response")]))
#pcaYVar$Response<-as.factor(pcaYVar$Response)
pcaYVar$Response<-as.numeric(pcaYVar$Response)
#i_train<-sample(1:nrow(pcaYVar), nrow(pcaYVar)*0.85)
#train<-pcaYVar[i_train,]
#test<-pcaYVar[-i_train,]
train <-pcaYVar[1:49382,]
test <- pcaYVar[49383:59382,]
lm_model <- lm(Response ~., data =train)
summary(lm_model)
pred <- predict(lm_model, test)
error <- (test$Response - pred)^2
print(error)
mse<-sqrt(mean(error, na.rm = T))
print(mse)
pf<-data.frame((round(pred)))
final<-data.frame(c(test$Response,pf$X.round.pred..))
View(final)
qplot(Response, data=test, geom="density", alpha=I(.5),
main="Distribution of Response", xlab="Response",
ylab="Density")
qplot(Response, data=train, geom="density", alpha=I(.5),
main="Distribution of Response", xlab="Response",
ylab="Density")
qplot(Response, data=test, geom="density", alpha=I(.5),
main="Distribution of Response on test data", xlab="Response",
ylab="Density")
qplot(Response, data=train, geom="density", alpha=I(.5),
main="Distribution of Response on train data", xlab="Response",
ylab="Density")
summary(final_pca_data)
summary(lm_model)
print(rmse)
rmse<-sqrt(mean(error, na.rm = T))
print(rmse)
getwd()
setwd("E:/ADS/MidTerm Project")
library(ade4)
library(ggplot2)
# Read CSV into R
mydata <- read.csv(file="train.csv", header=TRUE, sep=",")
original_data <- mydata
#mydata
options(max.print=1000000)
View(mydata)
#Deleting columns with empty cells more than 60%
mydata$Family_Hist_3 <- NULL
mydata$Family_Hist_5 <- NULL
mydata$Medical_History_10 <- NULL
mydata$Medical_History_15 <- NULL
mydata$Medical_History_24 <- NULL
mydata$Medical_History_32 <- NULL
mydata$Id <- NULL
View(mydata)
#Getting list of columns having missing values
mylist <- c(unlist(lapply(mydata, function(x) any(is.na(x)))))
View(mylist)
#Filling missing values with mean value for Employment_Info_1
mydata$Employment_Info_1[is.na(mydata$Employment_Info_1)] <- mean(mydata$Employment_Info_1, na.rm = T)
#Filling missing values with mean value for Employment_Info_4
mydata$Employment_Info_4[is.na(mydata$Employment_Info_4)] <- mean(mydata$Employment_Info_4, na.rm = T)
#Filling missing values with mean value for all the collumns of the dataset with their mean
#for(i in 1:ncol(mydata)){ data[is.na(mydata[,i]), i] <- mean(mydata[,i], na.rm = TRUE) }
#Not working
#Filling missing values with mean value for Employment_Info_6
mydata$Employment_Info_6[is.na(mydata$Employment_Info_6)] <- mean(mydata$Employment_Info_6, na.rm = T)
#Filling missing values with mean value for Insurance_History_5
mydata$Insurance_History_5[is.na(mydata$Insurance_History_5)] <- mean(mydata$Insurance_History_5, na.rm = T)
#Filling missing values with mean value for Family_Hist_2
mydata$Family_Hist_2[is.na(mydata$Family_Hist_2)] <- mean(mydata$Family_Hist_2, na.rm = T)
#Filling missing values with mean value for Family_Hist_4
mydata$Family_Hist_4[is.na(mydata$Family_Hist_4)] <- mean(mydata$Family_Hist_4, na.rm = T)
#Filling missing values with mean value for Medical_History_1
mydata$Medical_History_1[is.na(mydata$Medical_History_1)] <- mean(mydata$Medical_History_1, na.rm = T)
View(mylist)
write.csv(mydata,file ="train_updated.csv")
data_ctgr <- mydata[c("Medical_History_1","Product_Info_1", "Product_Info_2", "Product_Info_3", "Product_Info_5", "Product_Info_6", "Product_Info_7", "Employment_Info_2", "Employment_Info_3", "Employment_Info_5", "InsuredInfo_1", "InsuredInfo_2", "InsuredInfo_3", "InsuredInfo_4", "InsuredInfo_5", "InsuredInfo_6", "InsuredInfo_7", "Insurance_History_1", "Insurance_History_2", "Insurance_History_3", "Insurance_History_4", "Insurance_History_7", "Insurance_History_8", "Insurance_History_9", "Family_Hist_1", "Medical_History_2", "Medical_History_3", "Medical_History_4", "Medical_History_5", "Medical_History_6", "Medical_History_7", "Medical_History_8", "Medical_History_9", "Medical_History_11", "Medical_History_12", "Medical_History_13", "Medical_History_14", "Medical_History_16", "Medical_History_17", "Medical_History_18", "Medical_History_19", "Medical_History_20", "Medical_History_21", "Medical_History_22", "Medical_History_23", "Medical_History_25", "Medical_History_26", "Medical_History_27", "Medical_History_28", "Medical_History_29", "Medical_History_30", "Medical_History_31", "Medical_History_33", "Medical_History_34", "Medical_History_35", "Medical_History_36", "Medical_History_37", "Medical_History_38", "Medical_History_39", "Medical_History_40", "Medical_History_41")]
OneToCconv <- acm.disjonctif(data_ctgr)
data_cntg <- mydata[c("Product_Info_4", "Ins_Age", "Ht", "Wt", "BMI", "Employment_Info_1", "Employment_Info_4", "Employment_Info_6", "Insurance_History_5", "Family_Hist_2", "Family_Hist_4")]
data_dummy<-mydata[c("Medical_Keyword_1","Medical_Keyword_2","Medical_Keyword_3","Medical_Keyword_4","Medical_Keyword_5","Medical_Keyword_6","Medical_Keyword_7","Medical_Keyword_8","Medical_Keyword_9","Medical_Keyword_10","Medical_Keyword_11","Medical_Keyword_12","Medical_Keyword_13","Medical_Keyword_14","Medical_Keyword_15","Medical_Keyword_16","Medical_Keyword_17","Medical_Keyword_18","Medical_Keyword_19", "Medical_Keyword_20", "Medical_Keyword_21", "Medical_Keyword_22", "Medical_Keyword_23","Medical_Keyword_24", "Medical_Keyword_25", "Medical_Keyword_26", "Medical_Keyword_27", "Medical_Keyword_28", "Medical_Keyword_29","Medical_Keyword_30", "Medical_Keyword_31", "Medical_Keyword_32", "Medical_Keyword_33","Medical_Keyword_34", "Medical_Keyword_35","Medical_Keyword_36", "Medical_Keyword_37", "Medical_Keyword_38", "Medical_Keyword_39", "Medical_Keyword_40", "Medical_Keyword_41", "Medical_Keyword_42", "Medical_Keyword_43", "Medical_Keyword_44", "Medical_Keyword_45","Medical_Keyword_46", "Medical_Keyword_47","Medical_Keyword_48")]
final_data <- data.frame(c(OneToCconv, data_cntg,data_dummy))
final_pca_data <- prcomp(final_data)
summary(final_pca_data)
#
final_pca_data_trimmed <- data.frame(final_pca_data$x[,1:116])
pcaYVar <- data.frame(c(final_pca_data_trimmed, original_data[c("Response")]))
#pcaYVar$Response<-as.factor(pcaYVar$Response)
pcaYVar$Response<-as.numeric(pcaYVar$Response)
#i_train<-sample(1:nrow(pcaYVar), nrow(pcaYVar)*0.85)
#train<-pcaYVar[i_train,]
#test<-pcaYVar[-i_train,]
train <-pcaYVar[1:49382,]
test <- pcaYVar[49383:59382,]
View(test)
lm_model <- lm(Response ~., data =train)
summary(lm_model)
pred <- predict(lm_model, test)
error <- (test$Response - pred)^2
print(error)
rmse<-sqrt(mean(error, na.rm = T))
print(rmse)
pf<-data.frame((round(pred)))
final<-data.frame(c(test$Response,pf$X.round.pred..))
View(final)
install.packages("forecast")
library(forecast)
getwd()
setwd("E:/ADS/MidTerm Project")
library(ade4)
library(ggplot2)
library(forecast)
# Read CSV into R
mydata <- read.csv(file="train.csv", header=TRUE, sep=",")
original_data <- mydata
#mydata
options(max.print=1000000)
View(mydata)
#Deleting columns with empty cells more than 60%
mydata$Family_Hist_3 <- NULL
mydata$Family_Hist_5 <- NULL
mydata$Medical_History_10 <- NULL
mydata$Medical_History_15 <- NULL
mydata$Medical_History_24 <- NULL
mydata$Medical_History_32 <- NULL
mydata$Id <- NULL
View(mydata)
#Getting list of columns having missing values
mylist <- c(unlist(lapply(mydata, function(x) any(is.na(x)))))
View(mylist)
#Filling missing values with mean value for Employment_Info_1
mydata$Employment_Info_1[is.na(mydata$Employment_Info_1)] <- mean(mydata$Employment_Info_1, na.rm = T)
#Filling missing values with mean value for Employment_Info_4
mydata$Employment_Info_4[is.na(mydata$Employment_Info_4)] <- mean(mydata$Employment_Info_4, na.rm = T)
#Filling missing values with mean value for all the collumns of the dataset with their mean
#for(i in 1:ncol(mydata)){ data[is.na(mydata[,i]), i] <- mean(mydata[,i], na.rm = TRUE) }
#Not working
#Filling missing values with mean value for Employment_Info_6
mydata$Employment_Info_6[is.na(mydata$Employment_Info_6)] <- mean(mydata$Employment_Info_6, na.rm = T)
#Filling missing values with mean value for Insurance_History_5
mydata$Insurance_History_5[is.na(mydata$Insurance_History_5)] <- mean(mydata$Insurance_History_5, na.rm = T)
#Filling missing values with mean value for Family_Hist_2
mydata$Family_Hist_2[is.na(mydata$Family_Hist_2)] <- mean(mydata$Family_Hist_2, na.rm = T)
#Filling missing values with mean value for Family_Hist_4
mydata$Family_Hist_4[is.na(mydata$Family_Hist_4)] <- mean(mydata$Family_Hist_4, na.rm = T)
#Filling missing values with mean value for Medical_History_1
mydata$Medical_History_1[is.na(mydata$Medical_History_1)] <- mean(mydata$Medical_History_1, na.rm = T)
View(mylist)
write.csv(mydata,file ="train_updated.csv")
data_ctgr <- mydata[c("Medical_History_1","Product_Info_1", "Product_Info_2", "Product_Info_3", "Product_Info_5", "Product_Info_6", "Product_Info_7", "Employment_Info_2", "Employment_Info_3", "Employment_Info_5", "InsuredInfo_1", "InsuredInfo_2", "InsuredInfo_3", "InsuredInfo_4", "InsuredInfo_5", "InsuredInfo_6", "InsuredInfo_7", "Insurance_History_1", "Insurance_History_2", "Insurance_History_3", "Insurance_History_4", "Insurance_History_7", "Insurance_History_8", "Insurance_History_9", "Family_Hist_1", "Medical_History_2", "Medical_History_3", "Medical_History_4", "Medical_History_5", "Medical_History_6", "Medical_History_7", "Medical_History_8", "Medical_History_9", "Medical_History_11", "Medical_History_12", "Medical_History_13", "Medical_History_14", "Medical_History_16", "Medical_History_17", "Medical_History_18", "Medical_History_19", "Medical_History_20", "Medical_History_21", "Medical_History_22", "Medical_History_23", "Medical_History_25", "Medical_History_26", "Medical_History_27", "Medical_History_28", "Medical_History_29", "Medical_History_30", "Medical_History_31", "Medical_History_33", "Medical_History_34", "Medical_History_35", "Medical_History_36", "Medical_History_37", "Medical_History_38", "Medical_History_39", "Medical_History_40", "Medical_History_41")]
OneToCconv <- acm.disjonctif(data_ctgr)
data_cntg <- mydata[c("Product_Info_4", "Ins_Age", "Ht", "Wt", "BMI", "Employment_Info_1", "Employment_Info_4", "Employment_Info_6", "Insurance_History_5", "Family_Hist_2", "Family_Hist_4")]
data_dummy<-mydata[c("Medical_Keyword_1","Medical_Keyword_2","Medical_Keyword_3","Medical_Keyword_4","Medical_Keyword_5","Medical_Keyword_6","Medical_Keyword_7","Medical_Keyword_8","Medical_Keyword_9","Medical_Keyword_10","Medical_Keyword_11","Medical_Keyword_12","Medical_Keyword_13","Medical_Keyword_14","Medical_Keyword_15","Medical_Keyword_16","Medical_Keyword_17","Medical_Keyword_18","Medical_Keyword_19", "Medical_Keyword_20", "Medical_Keyword_21", "Medical_Keyword_22", "Medical_Keyword_23","Medical_Keyword_24", "Medical_Keyword_25", "Medical_Keyword_26", "Medical_Keyword_27", "Medical_Keyword_28", "Medical_Keyword_29","Medical_Keyword_30", "Medical_Keyword_31", "Medical_Keyword_32", "Medical_Keyword_33","Medical_Keyword_34", "Medical_Keyword_35","Medical_Keyword_36", "Medical_Keyword_37", "Medical_Keyword_38", "Medical_Keyword_39", "Medical_Keyword_40", "Medical_Keyword_41", "Medical_Keyword_42", "Medical_Keyword_43", "Medical_Keyword_44", "Medical_Keyword_45","Medical_Keyword_46", "Medical_Keyword_47","Medical_Keyword_48")]
final_data <- data.frame(c(OneToCconv, data_cntg,data_dummy))
final_pca_data <- prcomp(final_data)
summary(final_pca_data)
#
final_pca_data_trimmed <- data.frame(final_pca_data$x[,1:116])
pcaYVar <- data.frame(c(final_pca_data_trimmed, original_data[c("Response")]))
#pcaYVar$Response<-as.factor(pcaYVar$Response)
pcaYVar$Response<-as.numeric(pcaYVar$Response)
#i_train<-sample(1:nrow(pcaYVar), nrow(pcaYVar)*0.85)
#train<-pcaYVar[i_train,]
#test<-pcaYVar[-i_train,]
train <-pcaYVar[1:49382,]
test <- pcaYVar[49383:59382,]
View(test)
lm_model <- lm(Response ~., data =train)
summary(lm_model)
pred <- predict(lm_model, test)
accuracy(pred,test$Response)
#error <- (test$Response - pred)^2
#print(error)
#rmse<-sqrt(mean(error, na.rm = T))
#print(rmse)
pf<-data.frame((round(pred)))
final<-data.frame(c(test$Response,pf$X.round.pred..))
View(final)
qplot(Response, data=test, geom="density", alpha=I(.5), fill="yellow",
main="Distribution of Response on test data", xlab="Response",
ylab="Density")
qplot(Response, data=train, geom="density", alpha=I(.5),
main="Distribution of Response on train data", xlab="Response",
ylab="Density")
qplot(Response, data=test, geom="density", alpha=I(.5), fill,
main="Distribution of Response on test data", xlab="Response",
ylab="Density")
qplot(Response, data=train, geom="density", alpha=I(.5),
main="Distribution of Response on train data", xlab="Response",
ylab="Density")
qplot(Response, data=test, geom="density", alpha=I(.5), fill,
main="Distribution of Response on test data", xlab="Response",
ylab="Density")
qplot(Response, data=test, geom="density", alpha=I(.5), fill="density",
main="Distribution of Response on test data", xlab="Response",
ylab="Density")
??accuracy
??svm
