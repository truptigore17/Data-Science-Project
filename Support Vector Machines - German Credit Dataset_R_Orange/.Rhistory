library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
install.packages("caret")
install.packages("e1701")
install.packages("e1701")
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
model = svm(Class ~ ., kernel = ???, cost = ???, gamma = ???, data = train_dateset, scale = F)
# http://stackoverflow.com/questions/21827776/plot-margins-for-support-vector-machine
rm(list=ls(all=TRUE))
x1s <- c(.5,1,1,2,3,3.5,0,1,-1.2,0,1,3.5,4,5,5.5,6)
x2s <- c(3.5,1,2.5,2,1,1.2,2,1,-1.2,0,5.8,3,4,5,4,1)
ys <- c(rep(+1,8),          rep(-1,8))
my.data <- data.frame(x1=x1s, x2=x2s, type=as.factor(ys))
my.data
library('e1071')
# use one of the following two options
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 10000) # cost = 1
svm.model
#svm.model <- svm(type ~ ., data=my.data,
# type='C-classification', kernel='linear', scale=FALSE, cost = 0.5)
#svm.model
# svm.model$index is the indices of support vectors
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
###########################################################
######### Please fill the ??? with proper description (atleast 130 charaters for each)
######### for SVM function try different values to achieve better results
# loading neccessary packages and dataset
install.packages("caret")
install.packages("e1701")
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
# ???
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
install.packages("caret")
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
# ???
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
model = svm(Class ~ ., kernel = linear, cost = 0.5, gamma = 1, data = train_dateset, scale = F)
model = svm(Class ~ ., kernel = "linear", cost = 0.5, gamma = 1, data = train_dateset, scale = F)
predictions <-  predict(model, test_dateset[-10])
table(test_dateset[,10], predictions)
View(GermanCredit)
View(GermanCredit)
# http://stackoverflow.com/questions/21827776/plot-margins-for-support-vector-machine
rm(list=ls(all=TRUE))
x1s <- c(.5,1,1,2,3,3.5,0,1,-1.2,0,1,3.5,4,5,5.5,6)
x2s <- c(3.5,1,2.5,2,1,1.2,2,1,-1.2,0,5.8,3,4,5,4,1)
ys <- c(rep(+1,8),          rep(-1,8))
my.data <- data.frame(x1=x1s, x2=x2s, type=as.factor(ys))
my.data
library('e1071')
# use one of the following two options
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 10000) # cost = 1
svm.model
#svm.model <- svm(type ~ ., data=my.data,
# type='C-classification', kernel='linear', scale=FALSE, cost = 0.5)
#svm.model
# svm.model$index is the indices of support vectors
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 10) # cost = 1
svm.model
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 0.1) # cost = 1
svm.model
#svm.model <- svm(type ~ ., data=my.data,
# type='C-classification', kernel='linear', scale=FALSE, cost = 0.5)
#svm.model
# svm.model$index is the indices of support vectors
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 0.001) # cost = 1
svm.model
#svm.model <- svm(type ~ ., data=my.data,
# type='C-classification', kernel='linear', scale=FALSE, cost = 0.5)
#svm.model
# svm.model$index is the indices of support vectors
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 0.01) # cost = 1
svm.model
#svm.model <- svm(type ~ ., data=my.data,
# type='C-classification', kernel='linear', scale=FALSE, cost = 0.5)
#svm.model
# svm.model$index is the indices of support vectors
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
svm.model <- svm(type ~ ., data=my.data,
type='C-classification', kernel='radial', gamma=1,scale=FALSE, cost = 0.05) # cost = 1
svm.model
#svm.model <- svm(type ~ ., data=my.data,
# type='C-classification', kernel='linear', scale=FALSE, cost = 0.5)
#svm.model
# svm.model$index is the indices of support vectors
plot(my.data[,-3],col=(ys+3)/2, pch=19, xlim=c(-1,6), ylim=c(-1,6))
points(my.data[svm.model$index,c(1,2)],col="blue",cex=2)
x1min = min(x1s); x1max = max(x1s);
x2min = min(x2s); x2max = max(x2s);
coef1 = sum(svm.model$coefs*x1s[svm.model$index]);
coef2 = sum(svm.model$coefs*x2s[svm.model$index]);
lines(c(x1min,x1max),  (svm.model$rho-coef1*c(x1min, x1max))/coef2)
lines(c(x1min,x1max),  (svm.model$rho+1-coef1*c(x1min, x1max))/coef2, lty=2)
lines(c(x1min,x1max),  (svm.model$rho-1-coef1*c(x1min, x1max))/coef2, lty=2)
model = svm(Class ~ ., kernel = "radial", cost = 0.5, gamma = 1, data = train_dateset, scale = F)
###########################################################
######### Please fill the ??? with proper description (atleast 130 charaters for each)
######### for SVM function try different values to achieve better results
# loading neccessary packages and dataset
install.packages("caret")
install.packages("e1701")
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
write.csv(dataset, file="Germancredit.csv")
getwd()
# ???
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
write.csv(dataset, file="dataset.csv")
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
# ???
#model = svm(Class ~ ., kernel = ???, cost = ???, gamma = ???, data = train_dateset, scale = F)
#model = svm(Class ~ ., kernel = "linear", cost = 0.5, data = train_dateset, scale = F)
model = svm(Class ~ ., kernel = "radial", cost = 0.5, gamma = 1, data = train_dateset, scale = F)
# ???
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
write.csv(dataset, file="Germancredit.csv")
getwd()
# ???
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
write.csv(dataset, file="dataset.csv")
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
# ???
#model = svm(Class ~ ., kernel = ???, cost = ???, gamma = ???, data = train_dateset, scale = F)
#model = svm(Class ~ ., kernel = "linear", cost = 0.5, data = train_dateset, scale = F)
model = svm(Class ~ ., kernel = "radial", cost = 0.5, gamma = 1, data = train_dateset, scale = F)
# ???
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
write.csv(dataset, file="Germancredit.csv")
getwd()
# ???
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
write.csv(dataset, file="dataset.csv")
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
# ???
#model = svm(Class ~ ., kernel = ???, cost = ???, gamma = ???, data = train_dateset, scale = F)
#model = svm(Class ~ ., kernel = "linear", cost = 0.5, data = train_dateset, scale = F)
model = svm(Class ~ ., kernel = "radial", cost = 0.5, gamma = 1, data = train_dateset, scale = F)
# ???
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
model = svm(Class ~ ., kernel = "linear", cost = 0.5, data = train_dateset, scale = F)
predictions <-  predict(model, test_dateset[-10])
# ???
table(test_dateset[,10], predictions)
data("GermanCredit")
attach("GermanCredit")
data(GermanCredit)
attach(GermanCredit)
x<-subset(GermanCredit, select = -Class)
y<- Class
model<-svm(x,y)
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
write.csv(dataset, file="dataset.csv")
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
data(GermanCredit)
attach(GermanCredit)
dataset = GermanCredit
library(caret)
library(e1071)
data(GermanCredit)
attach(GermanCredit)
dataset = GermanCredit
library(caret)
library(e1071)
library(caret)
data(GermanCredit)
dataset = GermanCredit
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
x<-subset(GermanCredit, select = -Class)
y<- Class
model<-svm(x,y)
model<-svm(x,y, scale=F)
print(model)
summary(model)
prediction<-fitted(model)
prediction
table(prediction,y)
prediction<- predict(model, x, decision.values = TRUE)
attr(prediction,"decision values")[1:4,]
prediction<- predict(model, x, decision.values = TRUE)
attr(prediction,"decision values")[1:4,]
prediction<- predict(model, x, decision.values = TRUE)
attr(prediction,"decision values")[1:7,]
obj<-tune(svm, Class~.,data= train_dateset, gamma=2^(-2:2), cost=2^(2:4)),tunecontrol = tune.control(sampling = "fix"))
obj<-tune(svm, Class~.,data= train_dateset, gamma=2^(-2:2), cost=2^(2:4))
summary(obj)
plot(obj)
warnings()
obj<-tune(svm, Class~.,data= train_dateset, gamma=2^(-2:2), cost=2^(2:4), scale=F)
summary(obj)
plot(obj)
best.tune(obj)
obj<-tune(svm, Class~.,train.x, train.y=Null,data= train_dateset, gamma=2^(-2:2), cost=2^(2:4), scale=F)
best.tune(obj)
obj<-tune(svm, Class~.,train.x, train.y=Class,data= train_dateset, gamma=2^(-2:2), cost=2^(2:4), scale=F)
best.tune(obj)
obj<-tune(svm, Class~.,train.x, train.y="Class",data= train_dateset, gamma=2^(-2:2), cost=2^(2:4), scale=F)
obj<-tune(svm, Class~.,data= train_dateset, gamma=2^(-2:2), cost=2^(2:4), scale=F)
obj<-tune(svm, Class~.,kernel ="radial", data= train_dateset, gamma=2^(-2:2), cost=2^(2:4), scale=F)
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
model<-svm(Class~., data=train_dateset)
x<-subset(GermanCredit, select = -Class)
y<- Class
model<-svm(x,y, scale=F)
print(model)
summary(model)
summary(model)
obj<-tune(svm, Class~.,kernel ="radial", data= train_dateset, gamma=2^(-15:3), cost=2^(-5:15), scale=F)
best.tune(obj)
x<-subset(train_dateset, select = -Class)
y<- train_dateset$Class
model<-svm(x,y, scale=F)
obj<-tune(svm, Class~.,kernel ="radial", data= train_dateset, gamma=2^(-15:3), cost=2^(-5:15), scale=F)
summary(obj)
obj<-tune(svm, kernel ="radial", data= train_dateset, gamma=2^(-15:3), cost=2^(-5:15), scale=F)
obj<-tune(svm, kernel ="radial", data= train_dateset, gamma=2^(-15:3), cost=2^(-5:15))
obj<-tune(svm, class~.,kernel ="radial", data= train_dateset, gamma=2^(-15:3), cost=2^(-5:15))
obj<-tune(svm, class~.,kernel ="radial", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15))
best.tune(obj)
warnings()
summary(obj)
plot(obj)
obj<-tune(svm, class~.,kernel ="radial", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
x<-subset(train_dateset, select = -Class)
y<- train_dateset$Class
model<-svm(x,y, scale=F)
obj<-tune(svm, class~.,kernel ="radial", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
obj<-tune(svm, Class~.,kernel ="radial", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
summary(obj)
best.tune(obj)
obj<-tune(svm, Class~.,kernel ="linear", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
View(train_dateset)
#install.packages("caret")
#install.packages("e1701")
library(caret)
library(e1071)
data(GermanCredit)
dataset = GermanCredit
str(dataset)
dataset[,1:7] = as.data.frame(lapply(dataset[,1:7], scale))
str(dataset)
dataset
#write.csv(dataset, file="dataset.csv")
# ???
sample_index = sample(1000, 200)
test_dateset = dataset[sample_index,]
train_dateset = dataset[-sample_index,]
#classification mode
# default with factor response :
#model<-svm(Class~., data=train_dateset)
#alternatively traditional interface :
x<-subset(train_dateset, select = -Class)
y<- train_dateset$Class
model<-svm(x,y, scale=F)
#print(model)
#summary(model)
#test with train data
#prediction<- predict(model,x)
#(same as:)
#prediction<-fitted(model)
#prediction
#check accuracy
#table(prediction,y)
# compute decision values  and probabilities
#prediction<- predict(model, x, decision.values = TRUE)
#attr(prediction,"decision values")[1:7,]
obj<-tune(svm, Class~.,kernel ="radial", data= train_dateset, ranges=list(gamma=2^(-1:3), cost=2^(-1:3)))
#summary(obj)
#obj<-tune(svm, Class~.,kernel ="linear", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
summary(obj)
#obj<-tune(svm, Class~.,kernel ="polynomial", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
#summary(obj)
#obj<-tune(svm, Class~.,kernel ="sigmoid", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
#summary(obj)
obj<-tune(svm, Class~.,kernel ="radial", data= train_dateset, ranges=list(gamma=2^(-8:3), cost=2^(-2:5)))
summary(obj)
obj<-tune(svm, Class~.,kernel ="radial", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
summary(obj)
obj<-tune(svm, Class~.,kernel ="linear", data= train_dateset, ranges=list(gamma=2^(-15:3), cost=2^(-5:15)))
obj<-tune(svm, Class~.,kernel ="linear", data= train_dateset, ranges=list(cost=2^(-5:15)))
obj<-tune(svm, Class~.,kernel ="linear", data= train_dateset, ranges=list(cost=2^(-5:15)))
